// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Afomiat/Digital-IMCI/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CounselingRepository is an autogenerated mock type for the CounselingRepository type
type CounselingRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, counseling
func (_m *CounselingRepository) Create(ctx context.Context, counseling *domain.Counseling) error {
	ret := _m.Called(ctx, counseling)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Counseling) error); ok {
		r0 = rf(ctx, counseling)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByAssessmentID provides a mock function with given fields: ctx, assessmentID
func (_m *CounselingRepository) GetByAssessmentID(ctx context.Context, assessmentID uuid.UUID) ([]*domain.Counseling, error) {
	ret := _m.Called(ctx, assessmentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssessmentID")
	}

	var r0 []*domain.Counseling
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*domain.Counseling, error)); ok {
		return rf(ctx, assessmentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*domain.Counseling); ok {
		r0 = rf(ctx, assessmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Counseling)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, assessmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCounselingRepository creates a new instance of CounselingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounselingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounselingRepository {
	mock := &CounselingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
