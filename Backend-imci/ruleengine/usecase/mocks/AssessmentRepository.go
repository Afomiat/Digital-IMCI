// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Afomiat/Digital-IMCI/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// AssessmentRepository is an autogenerated mock type for the AssessmentRepository type
type AssessmentRepository struct {
	mock.Mock
}

// CalculateAgeInfo provides a mock function with given fields: ctx, patientID, assessmentTime
func (_m *AssessmentRepository) CalculateAgeInfo(ctx context.Context, patientID uuid.UUID, assessmentTime time.Time) (int, domain.AssessmentType, error) {
	ret := _m.Called(ctx, patientID, assessmentTime)

	if len(ret) == 0 {
		panic("no return value specified for CalculateAgeInfo")
	}

	var r0 int
	var r1 domain.AssessmentType
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (int, domain.AssessmentType, error)); ok {
		return rf(ctx, patientID, assessmentTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) int); ok {
		r0 = rf(ctx, patientID, assessmentTime)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) domain.AssessmentType); ok {
		r1 = rf(ctx, patientID, assessmentTime)
	} else {
		r1 = ret.Get(1).(domain.AssessmentType)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r2 = rf(ctx, patientID, assessmentTime)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: ctx, assessment
func (_m *AssessmentRepository) Create(ctx context.Context, assessment *domain.Assessment) error {
	ret := _m.Called(ctx, assessment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Assessment) error); ok {
		r0 = rf(ctx, assessment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, medicalProfessionalID
func (_m *AssessmentRepository) Delete(ctx context.Context, id uuid.UUID, medicalProfessionalID uuid.UUID) error {
	ret := _m.Called(ctx, id, medicalProfessionalID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, medicalProfessionalID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id, medicalProfessionalID
func (_m *AssessmentRepository) GetByID(ctx context.Context, id uuid.UUID, medicalProfessionalID uuid.UUID) (*domain.Assessment, error) {
	ret := _m.Called(ctx, id, medicalProfessionalID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Assessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*domain.Assessment, error)); ok {
		return rf(ctx, id, medicalProfessionalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *domain.Assessment); ok {
		r0 = rf(ctx, id, medicalProfessionalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Assessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, id, medicalProfessionalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPatientID provides a mock function with given fields: ctx, patientID, medicalProfessionalID
func (_m *AssessmentRepository) GetByPatientID(ctx context.Context, patientID uuid.UUID, medicalProfessionalID uuid.UUID) ([]*domain.Assessment, error) {
	ret := _m.Called(ctx, patientID, medicalProfessionalID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPatientID")
	}

	var r0 []*domain.Assessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) ([]*domain.Assessment, error)); ok {
		return rf(ctx, patientID, medicalProfessionalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) []*domain.Assessment); ok {
		r0 = rf(ctx, patientID, medicalProfessionalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Assessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, patientID, medicalProfessionalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, assessment
func (_m *AssessmentRepository) Update(ctx context.Context, assessment *domain.Assessment) error {
	ret := _m.Called(ctx, assessment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Assessment) error); ok {
		r0 = rf(ctx, assessment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAssessmentRepository creates a new instance of AssessmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssessmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssessmentRepository {
	mock := &AssessmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
