// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Afomiat/Digital-IMCI/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ClinicalFindingsRepository is an autogenerated mock type for the ClinicalFindingsRepository type
type ClinicalFindingsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, findings
func (_m *ClinicalFindingsRepository) Create(ctx context.Context, findings *domain.ClinicalFindings) error {
	ret := _m.Called(ctx, findings)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ClinicalFindings) error); ok {
		r0 = rf(ctx, findings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByAssessmentID provides a mock function with given fields: ctx, assessmentID
func (_m *ClinicalFindingsRepository) GetByAssessmentID(ctx context.Context, assessmentID uuid.UUID) (*domain.ClinicalFindings, error) {
	ret := _m.Called(ctx, assessmentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssessmentID")
	}

	var r0 *domain.ClinicalFindings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ClinicalFindings, error)); ok {
		return rf(ctx, assessmentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ClinicalFindings); ok {
		r0 = rf(ctx, assessmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ClinicalFindings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, assessmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, findings
func (_m *ClinicalFindingsRepository) Upsert(ctx context.Context, findings *domain.ClinicalFindings) error {
	ret := _m.Called(ctx, findings)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ClinicalFindings) error); ok {
		r0 = rf(ctx, findings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClinicalFindingsRepository creates a new instance of ClinicalFindingsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClinicalFindingsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClinicalFindingsRepository {
	mock := &ClinicalFindingsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
